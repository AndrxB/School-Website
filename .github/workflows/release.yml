name: Bump Version and Create Release

on:
  push:
    branches:
      - main

jobs:
  versioning:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: Install dependencies
        run: npm install

      # Step 1: Analyze the commit message to determine if we need to bump the version
      - name: Check commit message for keywords
        id: version_type
        run: |
          if [[ "${{ github.event.head_commit.message }}" =~ "major" ]]; then
            echo "version_type=major" >> $GITHUB_ENV
          elif [[ "${{ github.event.head_commit.message }}" =~ "minor" ]]; then
            echo "version_type=minor" >> $GITHUB_ENV
          elif [[ "${{ github.event.head_commit.message }}" =~ "patch" ]]; then
            echo "version_type=patch" >> $GITHUB_ENV
          else
            echo "version_type=none" >> $GITHUB_ENV
          fi

      # Step 2: Run npm version to bump the correct version
      - name: Bump version
        if: env.version_type != 'none'
        run: |
          npm version ${{ env.version_type }} --no-git-tag-version
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git commit -am "Bump version to $(jq -r '.version' < package.json)" 

      # Step 3: Push the updated version back to the repo (if a version was bumped)
      - name: Push changes
        if: env.version_type != 'none'
        run: |
          git push origin HEAD

  release:
    runs-on: ubuntu-latest
    needs: versioning

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Get the version from package.json to use for tagging the release
      - name: Get version from package.json
        id: get_version
        run: |
          VERSION=$(jq -r '.version' < package.json)
          echo "version=$VERSION" >> $GITHUB_ENV

      # Step 4: Create a new GitHub Release with the updated version
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ env.version }}"
          release_name: "Release v${{ env.version }}"
          draft: false
          prerelease: false
